package mop;

import java.lang.*;

/**
 * Prevents registering a shutdown hook that has been started.
 *
 * addShutdownHook() registers a shutdown hook, an initialized but unstarted
 * thread that will be started when the VM begins the shutdown sequence. Since
 * a shutdown hook is started by the VM, it should not be started prematurely
 * by the user code. This specification captures the premature start.
 *
 * Once the shutdown sequence has begun, registering or unregistering a hook
 * is banned. This specification also captures the violation of this.
 */

ShutdownHook_PrematureStart(Thread t) {

	creation event good_register before(Thread t) : call(* Runtime+.addShutdownHook(..)) && args(t) && condition(t.getState() == Thread.State.NEW) {}

	creation event bad_register before(Thread t) : call(* Runtime+.addShutdownHook(..)) && args(t) && condition(t.getState() != Thread.State.NEW) {}

	event unregister before(Thread t) : call(* Runtime+.removeShutdownHook(..)) && args(t) {}

	event userstart before(Thread t) : call(* Thread+.start(..)) && target(t) {}

	fsm :
		unregistered [
			good_register -> registered
			bad_register -> err
		]
		registered [
			unregister -> unregistered
			userstart -> err
		]
		err [
		]

	@err {
		System.err.println("A virtual-machine shutdown hook has been started by the user code.");
	}
}

