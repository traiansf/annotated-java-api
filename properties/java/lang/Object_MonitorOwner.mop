package mop;

import java.io.*;
import java.lang.*;

/**
 * Warns if notify(), notifyAll(), and wait(..) methods are called without holding the monitor of the object.
 *
 * According to the manual, those methods can only be called by a thread that is the owner of the object's monitor.
 * http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html#notify%28%29
 * http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html#notifyAll%28%29
 * http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html#wait%28%29
 * http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html#wait%28long%29
 * http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html#wait%28long,%20int%29
 *
 * @severity error
 */
 
Object_MonitorOwner() {
	event bad_notify before(Object o): 
		(call(* Object+.notify(..)) || call(* Object+.notifyAll(..)))&& target(o) && if(!Thread.holdsLock(o)) {
			javamoprt.MOPLogging.out.println(ERROR, "At line " + __LOC + " Object_MonitorOwner was violated.");
			javamoprt.MOPLogging.out.println(ERROR, "notify() and notifyAll() can be called only by the owner of this object's monitor.");
		}
        
	event bad_wait before(Object o): 
		call(* Object+.wait(..)) && target(o) && if(!Thread.holdsLock(o)) {
			javamoprt.MOPLogging.out.println(ERROR, "At line " + __LOC + " Object_MonitorOwner was violated.");
			javamoprt.MOPLogging.out.println(ERROR, "wait() can be called only by the owner of this object's monitor.");
		}
        
    
}

