package mop;

import java.lang.*;
import javax.swing.*;

/**
 * Warns if a shutdown hook attempts to use thread-based services such as
 * SwingUtilities because it may lead to deadlocks.
 *
 * According to the manual, a shutdown hook, which is started by the VM 
 * during the shutdown sequence, should not use thread-based services, 
 * in order to avoid deadlocks.
 * http://docs.oracle.com/javase/6/docs/api/java/lang/Runtime.html
 *
 * @severity error
 */
ShutdownHook_UnsafeSwingCall(Thread t) {
	creation event register before(Thread t) : call(* Runtime+.addShutdownHook(..)) && args(t) {}
	creation event unregister before(Thread t) : call(* Runtime+.removeShutdownHook(..)) && args(t) {}
	event start before(Thread t) : startThread() && thread(t) {}
	event swingcall void around(Thread t) :
		(
			call(* SwingUtilities+.invokeAndWait(..))
			|| call(* SwingUtilities+.invokeLater(..))
			|| call(* SwingWorker+.execute(..))
		)
		&& thread(t) {__SKIP;}
	event swingcall Object around(Thread t) :
		(
			call(* SwingWorker+.get(..))
		)
		&& thread(t) {__SKIP;}

	fsm :
		unregistered [
			register -> registered
		]
		registered [
			unregister -> unregistered
			start -> started
		]
		started [
			swingcall -> unsafe
		]
		unsafe [
			swingcall -> unsafe
		]

	@unsafe {
		javamoprt.MOPLogging.out.println(ERROR, "At line " + __LOC + " ShutdownHook_UnsafeSwingCall was violated.");
		javamoprt.MOPLogging.out.println(ERROR, "An operation that potentially leads to deadlocks was performed in a shutdown hook.");
	}
}

