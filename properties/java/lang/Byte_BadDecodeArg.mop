package mop;

import java.io.*;
import java.lang.*;

/**
 * Warns when the argument to decode is wrong
 *
 * According to the manual, the argument cannot contain any whitespace.
 * Also, there is a format to follow. 
 * http://docs.oracle.com/javase/6/docs/api/java/lang/Byte.html#decode%28java.lang.String%29
 *
 * @severity error
 */
Byte_BadDecodeArg() {

	event decode before(Byte b, String nm) : 
		call(* Byte.decode(String)) && target(b) && args(nm) {
		if (nm == null || nm.length() == 0) {
			javamoprt.MOPLogging.out.println(ERROR, "At line " + __LOC + " Byte_BadDecodeArg was violated.");
			javamoprt.MOPLogging.out.println(ERROR, "Wrong argument to Byte.decode(String nm)");
		} else {
			// whitespace check
			for (int j = 0; j < nm.length(); j++) {
				if (Character.isWhitespace(nm.charAt(j))) {
					javamoprt.MOPLogging.out.println(ERROR, "At line " + __LOC + " Byte_BadDecodeArg was violated.");
					javamoprt.MOPLogging.out.println(ERROR, "Wrong argument to Byte.decode(String nm)");
				}
			}

			// formatcheck
			String sub;
			if (nm.charAt(0) == '-') {
				sub = nm.substring(1);
			} else {
				sub = nm;
			}

			int radix = 0;
			if (sub.startsWith("0x") || sub.startsWith("0X")) {
				sub = sub.substring(2);
				radix = 16;
			} else if (sub.startsWith("#")) {
				sub = sub.substring(1);
				radix = 16;
			} else if (sub.startsWith("0")) {
				sub = sub.substring(1);
				radix = 8;
			} else {
				radix = 10;
			}

			try {
				if (Byte.parseByte(sub, radix) < 0) {
					javamoprt.MOPLogging.out.println(ERROR, "At line " + __LOC + " Byte_BadDecodeArg was violated.");
					javamoprt.MOPLogging.out.println(ERROR, "Wrong argument to Byte.decode(String nm)");
				}
			} catch (Exception e) {
				javamoprt.MOPLogging.out.println(ERROR, "At line " + __LOC + " Byte_BadDecodeArg was violated.");
				javamoprt.MOPLogging.out.println(ERROR, "Wrong argument to Byte.decode(String nm)");
			}

		}
    }
}

