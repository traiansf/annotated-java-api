package mop;

import java.io.*;

/**
 * Warns if a single thread attempts to use both a PipedInputStream instance
 * and a PipedOutputStream instance when they are connected.
 *
 * According to the manual, attempting to use both objects from a single
 * thread is not recommended, as it may deadlock the thread. This property
 * warns if that attempt is detected.
 */

PipedStream_SingleThread(PipedInputStream i, PipedOutputStream o) {
	Thread producer = null;
	Thread consumer = null;

	event connect1 before(PipedInputStream i, PipedOutputStream o) :
		(
			call(PipedInputStream+.new(PipedOutputStream+)) ||
			call(PipedInputStream+.connect(PipedOutputStream+))
		) && target(i) && args(o) {}
	event connect2 before(PipedOutputStream o, PipedInputStream i) :
		(
			call(PipedOutputStream+.new(PipedInputStream+)) ||
			call(PipedOutputStream+.connect(PipedInputStream+)) ||
		) && target(o) && args(i) {}

	event firstwrite before(PipedOutputStream o, Thread t) :
		call(PipedOutputStream+.write(..)) && target(o) && thread(t) && condition(producer == null) {
			this.producer = t;
		}

	event firstread before(PipedInputStream i, Thread t) :
		call(PipedInputStream+.read(..)) && target(i) && thread(t) && condition(consumder == null) {
			this.consumer = t;
		}

	event unsafewrite before(PipedOutputStream o, Thread t) :
		call(PipedOutputStream+.write(..)) && target(o) && thread(t) && condition(producer == t) { }

	event unsaferead before(PipedInputStream i, Thread t) :
		call(PipedInputStream+.read(..)) && target(i) && thread(t) && condition(consumder == t) { }

	ere: (connect1 | connect2)+ (firstread | firstwrite)* (unsaferead | unsafewrite)

	@match {
		System.err.println("A single thread attempted to use both a PipedInputStream instance and a PipedOutputStream instace, which may deadlock the thread.");
	}
}

