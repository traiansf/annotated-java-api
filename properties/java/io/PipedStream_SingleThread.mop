package mop;

import java.io.*;

/**
 * Warns if a single thread attempts to use both a PipedInputStream instance
 * and a PipedOutputStream instance.
 *
 * As Java compilers and runtime do not detect the violation of this property
 * and violating it may lead to deadlock, it is encouraged to enable this
 * property.
 *
 * According to the manual, attempting to use both objects from a single
 * thread is not recommended, as it may deadlock the thread.
 * http://download.oracle.com/javase/6/docs/api/java/io/PipedInputStream.html
 *
 * This property warns if that attempt is detected.
 *
 * @severity warning
 */
PipedStream_SingleThread(PipedInputStream i, PipedOutputStream o, Thread t) {
	creation event create after(PipedOutputStream o) returning(PipedInputStream i) :
		call(PipedInputStream+.new(PipedOutputStream+)) && args(o) {}
	creation event create before(PipedInputStream i, PipedOutputStream o) :
		call(* PipedInputStream+.connect(PipedOutputStream+)) && target(i) && args(o) {}
	creation event create after(PipedInputStream i) returning(PipedOutputStream o) :
		call(PipedOutputStream+.new(PipedInputStream+)) && args(i) {}
	creation event create before(PipedOutputStream o, PipedInputStream i) :
		call(* PipedOutputStream+.connect(PipedInputStream+)) && target(o) && args(i) {}

	event write before(PipedOutputStream o, Thread t) :
		call(* PipedOutputStream+.write(..)) && target(o) && thread(t) {}

	event read before(PipedInputStream i, Thread t) :
		call(* PipedInputStream+.read(..)) && target(i) && thread(t) {}

	ere: create (write* | read*)

	@fail {
		System.err.println("A single thread attempted to use both a PipedInputStream instance and a PipedOutputStream instance, which may deadlock the thread.");
	}
}

