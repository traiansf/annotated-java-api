package mop;

import java.util.*;

/**
 * Warns if next()/previous() is invoked when hasNext()/hasPrevious() is not
 * invoked or returns false.
 *
 * This property requires that hasNext()/hasPrevious() be called before
 * next()/previous() and that hasNext()/hasPrevious() return true.
 *
 * @severity warning
 */

ListIterator_hasNextPrevious(ListIterator i) {
	event hasnexttrue after(ListIterator i) returning(boolean b) :
		call(* ListIterator.hasNext()) && target(i) &&
		condition(b) {}
	event hasnextfalse after(ListIterator i) returning(boolean b) :
		call(* ListIterator.hasNext()) && target(i) &&
		condition(!b) {}
	event next before(ListIterator i) :
		call(* ListIterator.next()) && target(i) {}

	event hasprevioustrue after(ListIterator i) returning(boolean b) :
		call(* ListIterator.hasPrevious()) && target(i) &&
		condition(b) {}
	event haspreviousfalse after(ListIterator i) returning(boolean b) :
		call(* ListIterator.hasPrevious()) && target(i) &&
		condition(!b) {}
	event previous before(ListIterator i) :
		call(* ListIterator.previous()) && target(i) {}

	fsm :
		na [
			hasnexttrue -> nextavailable
			hasnextfalse -> na
			hasprevioustrue -> prevavailable
			haspreviousfalse -> na
		]
		nextavailable [
			hasprevioustrue -> bothavailable
			haspreviousfalse -> nextavailable
			hasnexttrue -> nextavailable
			hasnextfalse -> na
			next -> na
		]
		prevavailable [
			hasnexttrue -> bothavailable
			hasnextfalse -> prevavailable
			hasprevioustrue -> prevavailable
			haspreviousfalse -> na
			previous -> na
		]
		bothavailable [
			hasnexttrue -> bothavailable
			hasnextfalse -> prevavailable
			hasprevioustrue -> bothavailable
			haspreviousfalse -> nextavailable
			next -> prevavailable
			previous -> nextavailable
		]

	@fail {
		System.out.println("ListIterator.hasNext()/hasPrevious() was not called before calling next()/previous().");
	}
}

