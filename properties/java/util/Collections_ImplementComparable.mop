package mop;

import java.util.*;

/**
 * Warns if the argument of Collections.sort(List<T>) is not comparable.
 *
 * All elements in the argument of Collections.sort(List<T>) must implement
 * the Comparable interface, and they must be mutually comparable.
 * http://docs.oracle.com/javase/6/docs/api/java/util/Collections.html#sort%28java.util.List%29
 *
 * This property verifies that each element implements the Comparable
 * interface, and if comparing each pair of elements does not raise a
 * ClassCastException. This property requires O(n^2) time for n elements.
 *
 * @severity error
 */

Collections_Sort() {
	event invalid_sort before(List<T> list) :
		call(void sort(List<T>)) && args(list) {
		for (int i = 0; i < list.size(); ++i) {
			// Each element must implement the Comparable interface.
			Object o1 = list.get(i);
			if (!(o1 instanceof Comparable))
				System.err.println(i + "-th element does not implement the Comparable interface.");

			// All elements must be mutually comparable.
			for (int j = i + 1; j < list.size(); ++j) {
				Object o2 = list.get(j);
				try {
					o1.compareTo(o2);
					o2.compareTo(o1);
				}
				catch (ClassCastException e) {
					System.err.println(i + "-th element and " + j + "-th element are not comparable.");
				}
			}
		}
	}
}

