package mop;

import java.util.*;
import java.lang.*;

/**
 * Warns if PriorityQueue is about to have a non-comparable object.
 *
 * PriorityQueue does not permit non-comparable elements.
 * http://docs.oracle.com/javase/6/docs/api/java/util/PriorityQueue.html
 *
 * The definition of a non-comparable object is not clear, but it is assumed
 * that an object that does not implement the Comparable interface is deemed
 * to be non-comparable.
 *
 * @severity error
 */

PriorityQueue_NonComparable() {
	event insertnull before(Object e) :
		(
			call(* Collection+.add*(..)) ||
			call(* Queue+.offer*(..))
		) && target(PriorityQueue) && args(e) {
		if (!(e instanceof Comparable)) {
			javamoprt.MOPLogging.out.println(ERROR, "At line " + __LOC + " PriorityQueue_NonComparable was violated.");
			javamoprt.MOPLogging.out.println(ERROR, "PriorityQueue does not permit non-comparable objects.");
		}
	}

	event insertnull before(Collection c) :
		call(* Collection+.addAll(Collection)) &&
		target(PriorityQueue) && args(c) {
		for (Object elem : c) {
			if (!(elem instanceof Comparable)) {
				javamoprt.MOPLogging.out.println(ERROR, "At line " + __LOC + " PriorityQueue_NonComparable was violated.");
				javamoprt.MOPLogging.out.println(ERROR, "PriorityQueue does not permit non-comparable objects.");
			}
		}
	}
}

